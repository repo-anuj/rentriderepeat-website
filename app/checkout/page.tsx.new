"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { motion } from "framer-motion"
import { ArrowRight, CreditCard, ChevronRight, Info, Lock, Loader2 } from "lucide-react"

interface BikeData {
  id: string;
  name: string;
  category: string;
  brand?: string;
  model?: string;
  price: number;
  securityDeposit: number;
  description?: string;
  images?: Array<{url: string, caption?: string}>;
  vendor?: string;
}

interface VendorData {
  id: string;
  name: string;
  email: string;
  phone?: string;
  address?: string;
  city?: string;
  gstNumber?: string;
}

export default function Checkout() {
  const router = useRouter()

  const [bikeData, setBikeData] = useState<BikeData | null>(null)
  const [vendorData, setVendorData] = useState<VendorData | null>(null)
  const [bookingDetails, setBookingDetails] = useState<{
    bikeId: string;
    bikeName: string;
    startDate: string;
    duration: number;
    totalPrice: number;
    securityDeposit: number;
  } | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isProcessing, setIsProcessing] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    zipCode: "",
    cardNumber: "",
    cardName: "",
    expiry: "",
    cvv: "",
  })

  // Fetch bike and booking details on component mount
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true)
      setError(null)
      
      try {
        // Get booking details from localStorage
        const savedBookingDetails = localStorage.getItem('bookingDetails')
        if (!savedBookingDetails) {
          throw new Error('No booking details found')
        }
        
        const parsedBookingDetails = JSON.parse(savedBookingDetails)
        setBookingDetails(parsedBookingDetails)
        
        // Fetch bike details
        const bikeResponse = await fetch(`/api/products/${parsedBookingDetails.bikeId}`)
        if (!bikeResponse.ok) {
          throw new Error('Failed to fetch bike details')
        }
        
        const bikeDataResult = await bikeResponse.json()
        if (!bikeDataResult.success) {
          throw new Error(bikeDataResult.message || 'Failed to fetch bike details')
        }
        
        const bike = bikeDataResult.data
        setBikeData({
          id: bike.id,
          name: bike.name,
          category: bike.category,
          brand: bike.brand,
          model: bike.model,
          price: bike.price,
          securityDeposit: bike.securityDeposit,
          description: bike.description,
          images: bike.images,
          vendor: bike.vendor
        })
        
        // Fetch vendor details if available
        if (bike.vendor) {
          try {
            const vendorResponse = await fetch(`/api/vendors/${bike.vendor}`)
            if (vendorResponse.ok) {
              const vendorResult = await vendorResponse.json()
              if (vendorResult.success) {
                setVendorData(vendorResult.data)
              }
            }
          } catch (vendorError) {
            console.error('Error fetching vendor:', vendorError)
            // Don't set error here, continue with checkout process
          }
        }
        
      } catch (err: any) {
        console.error('Error in checkout:', err)
        setError(err.message || 'An error occurred during checkout')
      } finally {
        setIsLoading(false)
      }
    }
    
    fetchData()
  }, [])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setIsProcessing(true)

    // Simulate API call for processing payment
    setTimeout(() => {
      // Clear booking details from localStorage after successful checkout
      localStorage.removeItem('bookingDetails')
      router.push("/success")
    }, 1500)
  }

  // Calculate costs
  const subtotal = bookingDetails ? bookingDetails.totalPrice : 0
  const insuranceFee = 5
  const gstRate = 0.18 // 18% GST
  const gstAmount = subtotal * gstRate
  const total = subtotal + insuranceFee + gstAmount
  const securityDeposit = bookingDetails?.securityDeposit || 0

  // Animation variants
  const fadeIn = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6 },
    },
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-primary mx-auto mb-6" />
          <h2 className="text-xl font-medium">Loading checkout details...</h2>
        </div>
      </div>
    )
  }

  if (error || !bikeData || !bookingDetails) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto">
          <h1 className="text-2xl font-bold mb-4">Checkout Error</h1>
          <p className="mb-6">{error || "Failed to load booking details. Please try again."}</p>
          <Link href="/products">
            <Button className="bg-primary hover:bg-primary/90">Browse All Bikes</Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          {/* Breadcrumb */}
          <div className="mb-8">
            <div className="flex items-center text-sm text-gray-600">
              <Link href="/" className="hover:text-primary">
                Home
              </Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <Link href="/products" className="hover:text-primary">
                Bikes
              </Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <Link href={`/products/${bikeData.id}`} className="hover:text-primary">
                {bikeData.name}
              </Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <span className="text-gray-900 font-medium">Checkout</span>
            </div>
          </div>

          <h1 className="text-3xl font-bold mb-8 text-center">Complete Your Booking</h1>

          <div className="grid md:grid-cols-3 gap-8">
            {/* Order Summary */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
              className="md:col-span-1 order-2 md:order-2"
            >
              <div className="bg-white p-6 rounded-lg shadow-md sticky top-24">
                <h2 className="text-xl font-bold mb-4">Order Summary</h2>

                <div className="flex items-start mb-4">
                  <div className="relative h-20 w-20 rounded overflow-hidden flex-shrink-0">
                    <img 
                      src={bikeData.images && bikeData.images.length > 0 
                        ? bikeData.images[0].url 
                        : "https://images.unsplash.com/photo-1558981403-c5f9899a28bc?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"} 
                      alt={bikeData.name}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="ml-4">
                    <h3 className="font-bold">{bikeData.name}</h3>
                    <p className="text-gray-600 text-sm">{bikeData.category}</p>
                    <p className="text-primary font-medium">₹{bikeData.price}/day</p>
                  </div>
                </div>

                {vendorData && (
                  <div className="bg-gray-50 p-3 rounded-lg mb-4">
                    <p className="font-medium mb-1">Vendor Details:</p>
                    <p className="text-sm">{vendorData.name}</p>
                    {vendorData.phone && <p className="text-sm">Phone: {vendorData.phone}</p>}
                    {vendorData.gstNumber && <p className="text-sm text-gray-500">GST: {vendorData.gstNumber}</p>}
                  </div>
                )}

                <div className="border-t border-b border-gray-200 py-4 my-4 space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Rental Period:</span>
                    <span>
                      {bookingDetails.duration} {bookingDetails.duration === 1 ? "day" : "days"}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Start Date:</span>
                    <span>{bookingDetails.startDate ? new Date(bookingDetails.startDate).toLocaleDateString() : "Not specified"}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">End Date:</span>
                    <span>
                      {bookingDetails.startDate
                        ? new Date(new Date(bookingDetails.startDate).setDate(new Date(bookingDetails.startDate).getDate() + bookingDetails.duration)).toLocaleDateString()
                        : "Not specified"}
                    </span>
                  </div>
                </div>

                <div className="space-y-2 mb-4">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Rental Subtotal:</span>
                    <span>₹{subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Insurance Fee:</span>
                    <span>₹{insuranceFee.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">GST (18%):</span>
                    <span>₹{gstAmount.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between font-bold text-lg pt-2 border-t">
                    <span>Total:</span>
                    <span>₹{total.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600 pt-2">
                    <span>Security Deposit:</span>
                    <span>₹{securityDeposit.toFixed(2)}</span>
                  </div>
                </div>

                <div className="bg-gray-50 p-4 rounded-lg mb-4">
                  <div className="flex items-start">
                    <Info className="h-5 w-5 text-primary mr-2 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm">
                        A refundable security deposit of <span className="font-medium">₹{securityDeposit.toFixed(2)}</span> will be collected separately before bike handover.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Checkout Form */}
            <motion.div
              variants={fadeIn}
              initial="hidden"
              animate="visible"
              className="md:col-span-2 order-1 md:order-1"
            >
              <div className="bg-white p-6 rounded-lg shadow-md">
                <form onSubmit={handleSubmit}>
                  <div className="mb-6">
                    <h2 className="text-xl font-bold mb-4">Personal Information</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-1">Full Name</label>
                        <Input
                          type="text"
                          name="name"
                          value={formData.name}
                          onChange={handleChange}
                          required
                          placeholder="Your full name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Email Address</label>
                        <Input
                          type="email"
                          name="email"
                          value={formData.email}
                          onChange={handleChange}
                          required
                          placeholder="Your email address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Phone Number</label>
                        <Input
                          type="tel"
                          name="phone"
                          value={formData.phone}
                          onChange={handleChange}
                          required
                          placeholder="Your phone number"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="mb-6">
                    <h2 className="text-xl font-bold mb-4">Billing Address</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium mb-1">Street Address</label>
                        <Input
                          type="text"
                          name="address"
                          value={formData.address}
                          onChange={handleChange}
                          required
                          placeholder="Your street address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">City</label>
                        <Input
                          type="text"
                          name="city"
                          value={formData.city}
                          onChange={handleChange}
                          required
                          placeholder="Your city"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">ZIP / Postal Code</label>
                        <Input
                          type="text"
                          name="zipCode"
                          value={formData.zipCode}
                          onChange={handleChange}
                          required
                          placeholder="Your ZIP code"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="mb-6">
                    <h2 className="text-xl font-bold mb-4">Payment Information</h2>
                    <div className="p-4 rounded-lg bg-gray-50 mb-6">
                      <div className="flex items-center text-sm">
                        <Lock className="h-4 w-4 text-primary mr-2" />
                        <span>Your payment information is secure and encrypted</span>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium mb-1">Card Number</label>
                        <div className="relative">
                          <Input
                            type="text"
                            name="cardNumber"
                            value={formData.cardNumber}
                            onChange={handleChange}
                            required
                            placeholder="1234 5678 9012 3456"
                            className="pr-10"
                          />
                          <CreditCard className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                        </div>
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium mb-1">Name on Card</label>
                        <Input
                          type="text"
                          name="cardName"
                          value={formData.cardName}
                          onChange={handleChange}
                          required
                          placeholder="Name as it appears on card"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Expiry Date</label>
                        <Input
                          type="text"
                          name="expiry"
                          value={formData.expiry}
                          onChange={handleChange}
                          required
                          placeholder="MM/YY"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">CVV</label>
                        <Input
                          type="text"
                          name="cvv"
                          value={formData.cvv}
                          onChange={handleChange}
                          required
                          placeholder="123"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="text-center">
                    <Button 
                      className="w-full md:w-auto px-12 py-6 text-lg"
                      type="submit"
                      disabled={isProcessing}
                    >
                      {isProcessing ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Processing...
                        </>
                      ) : (
                        <>
                          Complete Booking
                          <ArrowRight className="ml-2 h-5 w-5" />
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  )
}
